// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Provider {
  LOCAL
  KAKAO
}

enum Gender {
  MALE
  FEMALE
}

enum MyBookStatus {
  TO_READ
  START_READ
  READING
  READ
}

model Book {
  id                    Int            @id @default(autoincrement())
  isbn                  ISBN[]
  title                 String?
  author                Author[]
  myBook                MyBook[]
  translator            Translator[]
  publisher             String?
  price                 Int?
  thumbnail             String?
  contents              String?
  url                   String?
  status                String?
}

model ISBN {
  id                    Int            @id @default(autoincrement())
  isbn                  String         @unique
  bookId                Int
  book                  Book           @relation(fields: [bookId], references: [id])
}

model Author {
  id                    Int            @id @default(autoincrement())
  name                  String
  bookId                Int
  book                  Book           @relation(fields: [bookId], references: [id])
}

model Translator {
  id                    Int            @id @default(autoincrement())
  translator            String
  bookId                Int
  book                  Book           @relation(fields: [bookId], references: [id])
}

model User {
  id                    Int            @id @default(autoincrement())
  email                 String?        @unique
  password              String?
  name                  String?
  birthday              DateTime?
  gender                Gender?
  provider              Provider?
  profile               String?        @default("https://pic.lsw0604.store/20231123_1205SS_e16f2d7c-ae50-4558-9b5a-e44f9be0bf2e.jpg")
  myBook                MyBook[]
  commentLike           CommentLike[]
  commentReply          CommentReply[]
}

model MyBook {
  id                    Int            @id @default(autoincrement())
  userId                Int
  bookId                Int
  rating                Int?
  myBookStatus          MyBookStatus
  history               MyBookHistory[]
  comment               MyBookComment[]
  tag                   MyBookTag[]
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  user                  User           @relation(fields: [userId], references: [id])
  book                  Book           @relation(fields: [bookId], references: [id])
}

model MyBookComment {
  id                    Int            @id @default(autoincrement())
  myBookId              Int
  commentLike           CommentLike[]
  commentReply          CommentReply[]
  comment               String
  status                String
  isPublic              Boolean
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  myBook                MyBook         @relation(fields: [myBookId], references: [id])
}

model CommentLike {
  id                    Int            @id @default(autoincrement())
  userId                Int
  myBookCommentId       Int
  user                  User           @relation(fields: [userId], references: [id])
  myBookComment         MyBookComment  @relation(fields: [myBookCommentId], references: [id])
}

model CommentReply {
  id                    Int            @id @default(autoincrement())
  reply                 String
  myBookCommentId       Int
  userId                Int
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  user                  User           @relation(fields: [userId], references: [id])
  myBookComment         MyBookComment  @relation(fields: [myBookCommentId], references: [id])
}

model Tag {
  id                    Int            @id @default(autoincrement())
  tag                   String?
  myBookTag             MyBookTag[]
}

model MyBookTag {
  id                    Int            @id @default(autoincrement())
  myBookId              Int
  tagId                 Int
  myBook                MyBook         @relation(fields: [myBookId], references: [id])
  tag                   Tag            @relation(fields: [tagId], references: [id])
}

model MyBookHistory {
  id                    Int            @id @default(autoincrement())
  page                  Int?
  date                  DateTime?
  myBookId              Int
  myBook                MyBook         @relation(fields: [myBookId], references: [id])
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
}
