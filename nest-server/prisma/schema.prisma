// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Provider {
  LOCAL
  KAKAO
}

enum Gender {
  MALE
  FEMALE
}

enum MyBookStatus {
  WANT_TO_READ         // 읽고 싶은 책
  CURRENTLY_READING    // 읽는 중
  READ                 // 읽음
}

enum ReadingMood {
  INSPIRED             // 영감을 받음
  EXCITED              // 흥미로움, 설렘
  INTRIGUED            // 호기심이 생김
  SATISFIED            // 만족스러움
  NEUTRAL              // 중립적
  CONFUSED             // 혼란스러움
  DISAPPOINTED         // 실망스러움
  BORED                // 지루함
  EMOTIONAL            // 감정적으로 움직임
  THOUGHTFUL           // 생각에 잠김
  CHALLENGED           // 도전적인 느낌
  ENLIGHTENED          // 깨달음을 얻음
}

model Book {
  id                    Int            @id @default(autoincrement())
  title                 String
  publisher             String?
  price                 Int?
  sale_price            Int?
  thumbnail             String?
  contents              String?        @db.Text
  url                   String?        @db.Text
  datetime              DateTime       @db.DateTime()
  status                String?
  myBook                MyBook[]
  isbns                 ISBN[]
  authors               BookAuthor[]
  translators           BookTranslator[]
}

model ISBN {
  id                    Int            @id @default(autoincrement())
  code                  String         @unique
  bookId                Int
  book                  Book           @relation(fields: [bookId], references: [id])
}

model Author {
  id                    Int            @id @default(autoincrement())
  name                  String
  books                 BookAuthor[]
}

model Translator {
  id                    Int            @id @default(autoincrement())
  name                  String
  books                 BookTranslator[]
}

model BookAuthor {
  bookId                Int
  authorId              Int
  book                  Book           @relation(fields: [bookId], references: [id])
  author                Author         @relation(fields: [authorId], references: [id])

  @@id([bookId, authorId])
}

model BookTranslator {
  bookId                Int
  translatorId          Int
  book                  Book           @relation(fields: [bookId], references: [id])
  translator            Translator     @relation(fields: [translatorId], references: [id])

  @@id([bookId, translatorId])
}

model User {
  id                    Int            @id @default(autoincrement())
  email                 String?        @unique
  password              String?
  name                  String?
  birthday              DateTime?
  gender                Gender         @default(MALE)
  provider              Provider       @default(LOCAL)
  profile               String?
  myBook                MyBook[]
  reviewLike            ReviewLike[]
  reviewComment         ReviewComment[]
}

model MyBook {
  id                    Int            @id @default(autoincrement())
  userId                Int
  bookId                Int
  rating                Int            @default(0)
  status                MyBookStatus   @default(WANT_TO_READ)
  history               MyBookHistory[]
  review                MyBookReview[]
  tag                   MyBookTag[]
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  user                  User           @relation(fields: [userId], references: [id])
  book                  Book           @relation(fields: [bookId], references: [id])
}

model MyBookReview {
  id                    Int            @id @default(autoincrement())
  myBookId              Int
  reviewLike            ReviewLike[]
  reviewComment         ReviewComment[]
  review                String
  isPublic              Boolean
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  myBook                MyBook         @relation(fields: [myBookId], references: [id])
}

model ReviewLike {
  id                    Int            @id @default(autoincrement())
  userId                Int
  myBookReviewId        Int
  user                  User           @relation(fields: [userId], references: [id])
  myBookReview          MyBookReview   @relation(fields: [myBookReviewId], references: [id])
}

model ReviewComment {
  id                    Int            @id @default(autoincrement())
  comment               String
  myBookReviewId        Int
  userId                Int
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  user                  User           @relation(fields: [userId], references: [id])
  myBookReview          MyBookReview   @relation(fields: [myBookReviewId], references: [id])
}

model Tag {
  id                    Int            @id @default(autoincrement())
  value                 String         @unique
  myBookTag             MyBookTag[]
}

model MyBookTag {
  id                    Int            @id @default(autoincrement())
  myBookId              Int
  tagId                 Int
  myBook                MyBook         @relation(fields: [myBookId], references: [id])
  tag                   Tag            @relation(fields: [tagId], references: [id])
}

model MyBookHistory {
  id                    Int            @id @default(autoincrement())
  myBookId              Int
  startPage             Int?
  endPage               Int?
  date                  DateTime
  memo                  String?
  readingMood           ReadingMood
  myBook                MyBook         @relation(fields: [myBookId], references: [id])
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
}
